extends layout

block content
  //if not signed up, show landing page
  //if signed up, show key stats on home page
  if !user
    script.
      function signup() {
      document.getElementById("signup-form").submit();
      }
      //allow submitting with enter key
      document.getElementById('signup-form').onkeydown = function(e){
        if(e.keyCode == 13){
        document.getElementById("signup-form").submit();
        }
      };
    .row
      .container
        br
        h2 Weight tracking, simplified.
        br
      #welcome.container
        h3 Sign Up
        br
      form.form-horizontal(id='signup-form', action='/signup', method='POST')
        input(type='hidden', name='_csrf', value=_csrf)
        .form-group
          label.col-sm-3.control-label(for='email') Email
          .col-sm-7
            input.form-control(type='email', name='email', id='email', placeholder='Email', autofocus, required)
        .form-group
          label.col-sm-3.control-label(for='password') Password
          .col-sm-7
            input.form-control(type='password', name='password', id='password', placeholder='Password', required)
        .form-group
          label.col-sm-3.control-label(for='confirmPassword') Confirm Password
          .col-sm-7
            input.form-control(type='password', name='confirmPassword', id='confirmPassword', placeholder='Confirm Password', required)
        .form-group
          #welcome.container
            #login.btn.btn-md.btn-hover.btn-default(onclick='signup()') Login

    .row
      .col-sm-6
        h2
        p Donec id elit non mi porta gravida at eget metus. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Etiam porta sem malesuada magna mollis euismod. Donec sed odio dui.
        p
          a.btn.btn-default(href='#', role='button') View details »
      .col-sm-6
        h2 Heading
        p Donec id elit non mi porta gravida at eget metus. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Etiam porta sem malesuada magna mollis euismod. Donec sed odio dui.
        p
          a.btn.btn-default(href='#', role='button') View details »
      .col-sm-6
        h2 Heading
        p Donec id elit non mi porta gravida at eget metus. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Etiam porta sem malesuada magna mollis euismod. Donec sed odio dui.
        p
          a.btn.btn-default(href='#', role='button') View details »
      .col-sm-6
        h2 Heading
        p Donec id elit non mi porta gravida at eget metus. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Etiam porta sem malesuada magna mollis euismod. Donec sed odio dui.
        p
          a.btn.btn-default(href='#', role='button') View details »
  else

    head
      //jquery
      script(src='https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js')
      //functions
      script(type='text/javascript').
        var CSRF_HEADER = 'x-csrf-token';
        function change_table() {
          /*goal piece*/
          //gettting json values
          var goals_json = document.getElementById("goals_json").value;
          var goals_json_value1 = JSON.parse(goals_json);
          //console.log(goals_json_value1.goal)
          var enter_goals = document.getElementById("enter_goals");
          var goal_start = document.getElementById("goal_start");
          var goal_weight = document.getElementById("goal_weight");
          var start_weight = document.getElementById("start_weight");
          var goal_date = document.getElementById("goal_date");
          var units = document.getElementById('weight_units');

          //need count in here to take the last value entered in goals
          var count = Object.keys(goals_json_value1.goal).length;
          var weight_count = Object.keys(goals_json_value1.weight).length;
          console.log(weight_count)
          if(count != 0){
          goal_start.value = (goals_json_value1.goal[count-1].goal_start)//.substring(0,10);
          goal_weight.value = goals_json_value1.goal[count-1].goal_weight;
          start_weight.value = goals_json_value1.goal[count-1].start_weight;
          goal_date.value = goals_json_value1.goal[count-1].goal_date;
          units.value = goals_json_value1.goal[count-1].weight_units;
          //progress = (goal-current - index 0 since sorted already)/(goal-start)
          if(weight_count != 0) {
            //set progress % var
            var progress_goal_stat = 1-(Math.abs((goal_weight.value)-(goals_json_value1.weight[0].weight))/Math.abs((goal_weight.value)-(start_weight.value)))

            //push goal progress update below progress bar
            document.getElementById("goal_progress_update").innerHTML += "&nbsp&nbsp;" +
            "<p style='font-size:110%;line-height:1.5'>" + (Math.round(progress_goal_stat * 100) + '%') + ' to goal weight of '+ goal_weight.value
            +units.value+', based on most recent weight of '+goals_json_value1.weight[0].weight+units.value+'.'+"</p>";

            //update #progresscontainer bar
            var bar = new ProgressBar.Line(progress_container, {
            strokeWidth: 4,
            easing: 'easeInOut',
            duration: 1600,
            color: '#2196f3',
            trailColor: '#eee',
            trailWidth: 1,
            svgStyle: {width: '100%', height: '100%'},
            text: {
            style: {
            // Text color.
            // Default: same as stroke color (options.color)
            color: '#2196f3',
            position: 'relative',
            right: '0',
            top: '30px',
            padding: 0,
            margin: 0,
            transform: null
            },
            autoStyleContainer: false
            },
            from: {color: '#FFEA82'},
            to: {color: '#ED6A5A'},
            step: (state, bar) => {
            bar.setText(Math.round(bar.value() * 100) + '%');
            }
            });
            bar.text.style.fontFamily = '"Raleway", Helvetica, sans-serif';
            bar.text.style.fontSize = '2rem';
            bar.animate(progress_goal_stat);  // Number from 0.0 to 1.0
            //console.log(goal_weight.value)
            //console.log((goals_json_value1.weight[0].weight))
            //console.log(goal_weight.value)
            //console.log(start_weight.value)
            //console.log(progress_goal_stat)
              }
                }

          else{
            console.log("empty")
          }
          //console.log(goals_json_value1.goal);
          if(jQuery("label[for='start_weight_label']").html('Start Weight'+' ('+units.value+'):') != undefined){
            jQuery("label[for='start_weight_label']").html('Start Weight'+' ('+units.value+'):');
          }
          else {
            jQuery("label[for='start_weight_label']").html('Start Weight')
          }

          if(jQuery("label[for='goal_weight_label']").html('Goal Weight'+' ('+units.value+'):') != undefined){
            jQuery("label[for='goal_weight_label']").html('Goal Weight'+' ('+units.value+'):')
          }
          else {
            jQuery("label[for='goal_weight_label']").html('Goal Weight:')
          }
          //Weight label form
          jQuery("label[for='weight_label']").html('Weight'+' ('+units.value+'):');
          //console.log(goals_json_value1.goal)


        };

        function change_weight() {
          /*weight piece*/
          //gettting json values
          var weight = document.getElementById("enter_weight_actual");
          //var date = document.getElementById("entry_date");
          //need count in here to take the last value entered in goals
          //enter_goals.value = goals_json_value1[0].enter_goals;
          //console.log(weights_json_value1[0].weight)
          ////***console.log(goals_json_value1.weight[0].weight);
          //default entry date to show today
          var offset = new Date().getTimezoneOffset();
          var date_stg1 = new Date();// gmt+2, == -120 (minutes)
          var date_stg2 = date_stg1 + Math.abs(offset*60000)
          var date_stg3 = new Date(date_stg2)
          date_stg3.setDate(date_stg3.getDate());

          console.log(date_stg3)
          document.getElementById("entry_date").valueAsDate = date_stg3
        };

        window.onload = function start(){
            change_table();
            change_weight();



            //if goals blank, will need to run goal_show_hide() and prompt to enter goals
            //goal_show_hide();
        };

        function goal_show_hide() {
          var x = document.getElementById('goals_form');
          if (x.style.display === 'none') {
          x.style.display = 'block';
          } else {
          x.style.display = 'none';
            }
          }
        function settings_show_hide() {
          var x = document.getElementById('settings_form');
          if (x.style.display === 'none') {
          x.style.display = 'block';
          } else {
          x.style.display = 'none';
            }
          }
        function enter_goals() {
          document.getElementById("goals_form").submit();

        }
        function enter_weight() {
        document.getElementById("weight_form").submit();
        }
        //allow submitting with enter key
        $('#goals_form').keydown(function() {
        var key = e.which;
        if (key == 13) {
        // As ASCII code for ENTER key is "13"
        document.getElementById("goals_form").submit();
        }
        });
    br
    br
    btn.btn-md.btn-hover.btn-default(onclick='goal_show_hide()') Settings/Goals

      input(type='hidden', id="goals_json", value= JSON.stringify(locals))
    form(style='display:none',id="goals_form", name="goals_form").form-horizontal(action='/postGoals', method='POST')
      br
      input(type='hidden', name='_csrf', value=_csrf)
      //.form-group
        label.col-sm-3.control-label Enter Goals?
        .col-sm-6
          label.radio.col-sm-3
            input(type='radio', name='enter_goals', value='yes', data-toggle='radio')
            span Yes
          label.radio.col-sm-3
            input(type='radio', name='enter_goals', value='no', data-toggle='radio')
            span No

      .form-group
        label.col-sm-3.control-label(for='select_weight') Select units:
        .col-sm-2
          select.form-control(type = 'text', name='weight_units', id='weight_units')
            option lbs
            |
            option kg
            |
      .form-group
        label.col-sm-3.control-label(for='location') Goal Start Date:
        .col-sm-7
          input.form-control(type='date' name='goal_start', id='goal_start')
      .form-group
        label.col-sm-3.control-label(for='start_weight_label')
        .col-sm-7
          input.form-control(type='number', step="any", min="0" name='start_weight', id='start_weight')
      .form-group
        label.col-sm-3.control-label(for='goal_weight_label')
        .col-sm-7
          input.form-control(type='number', step="any", min="0" name='goal_weight', id='goal_weight')
      .form-group
        label.col-sm-3.control-label(for='website') Target Date:
        .col-sm-7
          input.form-control(type='date', name='goal_date', id='goal_date')
      .form-group
        .col-sm-offset-3.col-sm-4
          #submit.btn.btn-md.btn-hover.btn-default(onclick='enter_goals()') Update Goals


    br
    br
    br
    h4 Enter weight
    br
    br
    form.form-horizontal(id="weight_form", action='/postWeights', method='POST')
      input(type='hidden', name='_csrf', value=_csrf)
      .form-group
        label.col-sm-3.control-label(for='weight_label')
        .col-sm-7
          input.form-control(type='number', step="any", min="0", name='enter_weight_actual', id='enter_weight_actual')
      .form-group
        label.col-sm-3.control-label(for='website') Date:
        .col-sm-7
          input.form-control(type='date', name='entry_date', id='entry_date')
      .form-group
        .col-sm-offset-3.col-sm-4
          #submit.btn.btn-md.btn-hover.btn-default(onclick='enter_weight()') Enter Weight
    br
    br
    h4 Progress to goal
    #progress_container
      script(src='https://cdnjs.cloudflare.com/ajax/libs/progressbar.js/1.0.1/progressbar.min.js')
      script.
          //https://kimmobrunfeldt.github.io/progressbar.js/ options
          //var ProgressBar = require('progressbar.js')

          // progressbar.js@1.0.0 version is used
          // Docs: http://progressbarjs.readthedocs.org/en/1.0.0/

    br
    br
    br
    .container
      #lead_row.row
        span#goal_progress_update.Price_num(style='', <='', span='')

    br
    h4 Summary statistics
    br
    .container
      #lead_row.row
        #Price_group.col-md-4
          span(style='font-size:120%;')   7-day average:
          br
          span#week_avg.Price_num(style='font-size:110%;', <='', span='')
        #Prev_wk_close.col-md-4
          span(style='font-size:120%;')   10-day average:
          br
          span#month_avg.Prev_wk_close_num(style='font-size:110%;', <='', span='')
        #wk_high.col-md-4
          span(style='font-size:120%;')   All-time average:
          br
          span#all_time_avg(style='font-size:110%;', <='', span='')

      // second row (first block blank for thicker price)
      //#second_row.row
        #Buffer.col-md-4
          span
          br
          span
        #Change.col-md-4
          span(style='color:black;font-weight:bold;font-size:120%')   Change (% chg):
          br
          span#Change_num(style='font-size:110%;', <='', span='')
        #wk_low.col-md-4
          span(style='font-size:120%;color:black;font-weight:bold;')   52-wk Low:
          br
          span#52_wk_low(style='font-size:110%;', <='', span='')

    br
    br
    br
    br
    br
    //this is where the chart will sit
    .div(id="tester")
    //plotly import, no account needed!
    script(src='https://cdn.plot.ly/plotly-latest.min.js')
    //plotly docs: https://plot.ly/javascript/getting-started/
    script.
      //console.log(db.weight.find().sort({"date":-1}));
      function get_pretty_date(value){
        var start_date = new Date(value)
        //start_date.setDate(start_date.getDate()+1);
        var s_year = start_date.getFullYear();
        var s_month = start_date.getMonth()+1;
        if(s_month <= 9)
            s_month = '0'+s_month;
        var s_day= start_date.getDate();
        if(s_day <= 9)
            s_day = '0'+s_day;
        var s_prettyDate = s_year +'-'+s_month +'-'+ s_day
        return s_prettyDate

      };
      var y_weight = [];
      var x_date = [];
      //bringing in the html element
      TESTER = document.getElementById('tester');
      var goals_json = document.getElementById("goals_json").value;
      var goals_json_value1 = JSON.parse(goals_json);
      for (var i = 0; i < goals_json_value1.weight.length; i++){
        //x_date_stg = (goals_json_value1.goal[count-1].createdAt).substring(0,10);
        var x_date_stg = get_pretty_date(goals_json_value1.weight[i].date)
        y_weight.push(goals_json_value1.weight[i].weight);
        x_date.push(x_date_stg);
        //console.log(x_date);
      }

      var data = [
        {
          x: x_date,
          y: y_weight,
          marker: {
          color: 'rgb(33, 150, 243)',
          size: 3,
          line: {
          color: 'green',
          width: 2
              }
          },
          type: "scatter",
        }
      ];

      var layout = {
        xaxis: {
          type: 'date',
          title: 'Date',
          showgrid: false,
          zeroline: false,
          showline: false,
          //tickformat: "%d %b %y",
          mirror: 'ticks',
          gridcolor: '#bdbdbd',
          gridwidth: 2,
          zerolinecolor: '#969696',
          zerolinewidth: 4,
          linecolor: '#636363',
          linewidth: 2

        },yaxis: {
          title: 'Weight',
          showgrid: false,
          zeroline: false,
          showline: false,
          mirror: 'ticks',
          gridcolor: '#bdbdbd',
          gridwidth: 2,
          zerolinecolor: '#969696',
          zerolinewidth: 4,
          linecolor: '#636363',
          linewidth: 2
          },
          title:'Weight trend'
        };
      //>4 records to display chart (otherwise it's pretty meaningless + axis looks screwy)
      if(goals_json_value1.weight.length>4)
        Plotly.plot( TESTER, data, layout);
    br
    br

    //***weight summary stats//***
    script.
      //***all time average//***
      var total = 0;
      for(var i = 0; i < goals_json_value1.weight.length; i++) {
        total += goals_json_value1.weight[i].weight;
      }
      var all_time_avg = (total / goals_json_value1.weight.length).toFixed(1);




      ////***7 day (week) moving average//***

      var week_cutoff = new Date();
      week_cutoff.setDate(week_cutoff.getDate()-7);
      //convert to ISO so matches for comparison
      var n = week_cutoff.toISOString();

      var total_week = 0;
      var count_week = 0;
      for(var j = 0; j < goals_json_value1.weight.length; j++) {

        if(goals_json_value1.weight[j].date >= (n)){
          total_week += goals_json_value1.weight[j].weight;
          count_week += 1;

        }
        else {
          total_week += 0;
          //console.log(goals_json_value1.weight[j].date);
          //console.log(week_cutoff.setDate(week_cutoff.getDate()+7));
        }
      }
      var week_avg = (total_week / count_week).toFixed(1);


      ////***30-day moving average//***

      var month_cutoff = new Date();
      month_cutoff.setDate(month_cutoff.getDate()-30);
      //convert to ISO so matches for comparison
      var m = month_cutoff.toISOString();

      var total_month = 0;
      var count_month = 0;
      for(var k = 0; k < goals_json_value1.weight.length; k++) {

        if(goals_json_value1.weight[k].date >= (m)){
          total_month += goals_json_value1.weight[k].weight;
          count_month += 1;
          //console.log(count_month);
          //console.log(goals_json_value1.weight[k].date);
          //console.log(goals_json_value1.weight[k].weight);
        }
        else {
          total_month += 0;
          //console.log(goals_json_value1.weight[j].date);
          //console.log(month_cutoff.setDate(month_cutoff.getDate()+7));
        }
      }
      var month_avg = (total_month / count_month).toFixed(1);

      //push weight summary stats to html
      document.getElementById("week_avg").innerHTML += "&nbsp&nbsp;" + "<b style='color:#2196f3;line-height:3'>" + week_avg + "</b>";
      document.getElementById("month_avg").innerHTML += "&nbsp&nbsp;" + "<b style='color:#2196f3;line-height:3'>" + month_avg +"</b>";
      document.getElementById("all_time_avg").innerHTML += "&nbsp&nbsp;" + "<b style='color:#2196f3;line-height:3'>" + all_time_avg +"</b>";
